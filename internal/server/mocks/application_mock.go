// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/cronnoss/tk-api/internal/storage/models"
	mock "github.com/stretchr/testify/mock"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

type Application_Expecter struct {
	mock *mock.Mock
}

func (_m *Application) EXPECT() *Application_Expecter {
	return &Application_Expecter{mock: &_m.Mock}
}

// CreateEvent provides a mock function with given fields: ctx, event
func (_m *Application) CreateEvent(ctx context.Context, event models.Event) (models.Event, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 models.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Event) (models.Event, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Event) models.Event); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(models.Event)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type Application_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event models.Event
func (_e *Application_Expecter) CreateEvent(ctx interface{}, event interface{}) *Application_CreateEvent_Call {
	return &Application_CreateEvent_Call{Call: _e.mock.On("CreateEvent", ctx, event)}
}

func (_c *Application_CreateEvent_Call) Run(run func(ctx context.Context, event models.Event)) *Application_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Event))
	})
	return _c
}

func (_c *Application_CreateEvent_Call) Return(_a0 models.Event, _a1 error) *Application_CreateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_CreateEvent_Call) RunAndReturn(run func(context.Context, models.Event) (models.Event, error)) *Application_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEvents provides a mock function with given fields: ctx, events
func (_m *Application) CreateEvents(ctx context.Context, events []models.Event) ([]models.Event, error) {
	ret := _m.Called(ctx, events)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvents")
	}

	var r0 []models.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Event) ([]models.Event, error)); ok {
		return rf(ctx, events)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Event) []models.Event); ok {
		r0 = rf(ctx, events)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.Event) error); ok {
		r1 = rf(ctx, events)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_CreateEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvents'
type Application_CreateEvents_Call struct {
	*mock.Call
}

// CreateEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - events []models.Event
func (_e *Application_Expecter) CreateEvents(ctx interface{}, events interface{}) *Application_CreateEvents_Call {
	return &Application_CreateEvents_Call{Call: _e.mock.On("CreateEvents", ctx, events)}
}

func (_c *Application_CreateEvents_Call) Run(run func(ctx context.Context, events []models.Event)) *Application_CreateEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.Event))
	})
	return _c
}

func (_c *Application_CreateEvents_Call) Return(_a0 []models.Event, _a1 error) *Application_CreateEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_CreateEvents_Call) RunAndReturn(run func(context.Context, []models.Event) ([]models.Event, error)) *Application_CreateEvents_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePlace provides a mock function with given fields: ctx, place
func (_m *Application) CreatePlace(ctx context.Context, place models.Place) (models.Place, error) {
	ret := _m.Called(ctx, place)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlace")
	}

	var r0 models.Place
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Place) (models.Place, error)); ok {
		return rf(ctx, place)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Place) models.Place); ok {
		r0 = rf(ctx, place)
	} else {
		r0 = ret.Get(0).(models.Place)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Place) error); ok {
		r1 = rf(ctx, place)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_CreatePlace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlace'
type Application_CreatePlace_Call struct {
	*mock.Call
}

// CreatePlace is a helper method to define mock.On call
//   - ctx context.Context
//   - place models.Place
func (_e *Application_Expecter) CreatePlace(ctx interface{}, place interface{}) *Application_CreatePlace_Call {
	return &Application_CreatePlace_Call{Call: _e.mock.On("CreatePlace", ctx, place)}
}

func (_c *Application_CreatePlace_Call) Run(run func(ctx context.Context, place models.Place)) *Application_CreatePlace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Place))
	})
	return _c
}

func (_c *Application_CreatePlace_Call) Return(_a0 models.Place, _a1 error) *Application_CreatePlace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_CreatePlace_Call) RunAndReturn(run func(context.Context, models.Place) (models.Place, error)) *Application_CreatePlace_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePlaces provides a mock function with given fields: ctx, places
func (_m *Application) CreatePlaces(ctx context.Context, places []models.Place) ([]models.Place, error) {
	ret := _m.Called(ctx, places)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlaces")
	}

	var r0 []models.Place
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Place) ([]models.Place, error)); ok {
		return rf(ctx, places)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Place) []models.Place); ok {
		r0 = rf(ctx, places)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Place)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.Place) error); ok {
		r1 = rf(ctx, places)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_CreatePlaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlaces'
type Application_CreatePlaces_Call struct {
	*mock.Call
}

// CreatePlaces is a helper method to define mock.On call
//   - ctx context.Context
//   - places []models.Place
func (_e *Application_Expecter) CreatePlaces(ctx interface{}, places interface{}) *Application_CreatePlaces_Call {
	return &Application_CreatePlaces_Call{Call: _e.mock.On("CreatePlaces", ctx, places)}
}

func (_c *Application_CreatePlaces_Call) Run(run func(ctx context.Context, places []models.Place)) *Application_CreatePlaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.Place))
	})
	return _c
}

func (_c *Application_CreatePlaces_Call) Return(_a0 []models.Place, _a1 error) *Application_CreatePlaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_CreatePlaces_Call) RunAndReturn(run func(context.Context, []models.Place) ([]models.Place, error)) *Application_CreatePlaces_Call {
	_c.Call.Return(run)
	return _c
}

// CreateShow provides a mock function with given fields: ctx, shows
func (_m *Application) CreateShow(ctx context.Context, shows models.Show) (models.Show, error) {
	ret := _m.Called(ctx, shows)

	if len(ret) == 0 {
		panic("no return value specified for CreateShow")
	}

	var r0 models.Show
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Show) (models.Show, error)); ok {
		return rf(ctx, shows)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Show) models.Show); ok {
		r0 = rf(ctx, shows)
	} else {
		r0 = ret.Get(0).(models.Show)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Show) error); ok {
		r1 = rf(ctx, shows)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_CreateShow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShow'
type Application_CreateShow_Call struct {
	*mock.Call
}

// CreateShow is a helper method to define mock.On call
//   - ctx context.Context
//   - shows models.Show
func (_e *Application_Expecter) CreateShow(ctx interface{}, shows interface{}) *Application_CreateShow_Call {
	return &Application_CreateShow_Call{Call: _e.mock.On("CreateShow", ctx, shows)}
}

func (_c *Application_CreateShow_Call) Run(run func(ctx context.Context, shows models.Show)) *Application_CreateShow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Show))
	})
	return _c
}

func (_c *Application_CreateShow_Call) Return(_a0 models.Show, _a1 error) *Application_CreateShow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_CreateShow_Call) RunAndReturn(run func(context.Context, models.Show) (models.Show, error)) *Application_CreateShow_Call {
	_c.Call.Return(run)
	return _c
}

// CreateShows provides a mock function with given fields: ctx, shows
func (_m *Application) CreateShows(ctx context.Context, shows []models.Show) ([]models.Show, error) {
	ret := _m.Called(ctx, shows)

	if len(ret) == 0 {
		panic("no return value specified for CreateShows")
	}

	var r0 []models.Show
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Show) ([]models.Show, error)); ok {
		return rf(ctx, shows)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Show) []models.Show); ok {
		r0 = rf(ctx, shows)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Show)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.Show) error); ok {
		r1 = rf(ctx, shows)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_CreateShows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShows'
type Application_CreateShows_Call struct {
	*mock.Call
}

// CreateShows is a helper method to define mock.On call
//   - ctx context.Context
//   - shows []models.Show
func (_e *Application_Expecter) CreateShows(ctx interface{}, shows interface{}) *Application_CreateShows_Call {
	return &Application_CreateShows_Call{Call: _e.mock.On("CreateShows", ctx, shows)}
}

func (_c *Application_CreateShows_Call) Run(run func(ctx context.Context, shows []models.Show)) *Application_CreateShows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.Show))
	})
	return _c
}

func (_c *Application_CreateShows_Call) Return(_a0 []models.Show, _a1 error) *Application_CreateShows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_CreateShows_Call) RunAndReturn(run func(context.Context, []models.Show) ([]models.Show, error)) *Application_CreateShows_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvents provides a mock function with given fields: ctx
func (_m *Application) GetEvents(ctx context.Context) ([]models.Event, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 []models.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Event, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Event); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type Application_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Application_Expecter) GetEvents(ctx interface{}) *Application_GetEvents_Call {
	return &Application_GetEvents_Call{Call: _e.mock.On("GetEvents", ctx)}
}

func (_c *Application_GetEvents_Call) Run(run func(ctx context.Context)) *Application_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Application_GetEvents_Call) Return(_a0 []models.Event, _a1 error) *Application_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_GetEvents_Call) RunAndReturn(run func(context.Context) ([]models.Event, error)) *Application_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlaces provides a mock function with given fields: ctx
func (_m *Application) GetPlaces(ctx context.Context) ([]models.Place, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPlaces")
	}

	var r0 []models.Place
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Place, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Place); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Place)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_GetPlaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlaces'
type Application_GetPlaces_Call struct {
	*mock.Call
}

// GetPlaces is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Application_Expecter) GetPlaces(ctx interface{}) *Application_GetPlaces_Call {
	return &Application_GetPlaces_Call{Call: _e.mock.On("GetPlaces", ctx)}
}

func (_c *Application_GetPlaces_Call) Run(run func(ctx context.Context)) *Application_GetPlaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Application_GetPlaces_Call) Return(_a0 []models.Place, _a1 error) *Application_GetPlaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_GetPlaces_Call) RunAndReturn(run func(context.Context) ([]models.Place, error)) *Application_GetPlaces_Call {
	_c.Call.Return(run)
	return _c
}

// GetShows provides a mock function with given fields: ctx
func (_m *Application) GetShows(ctx context.Context) ([]models.Show, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetShows")
	}

	var r0 []models.Show
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Show, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Show); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Show)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_GetShows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShows'
type Application_GetShows_Call struct {
	*mock.Call
}

// GetShows is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Application_Expecter) GetShows(ctx interface{}) *Application_GetShows_Call {
	return &Application_GetShows_Call{Call: _e.mock.On("GetShows", ctx)}
}

func (_c *Application_GetShows_Call) Run(run func(ctx context.Context)) *Application_GetShows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Application_GetShows_Call) Return(_a0 []models.Show, _a1 error) *Application_GetShows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_GetShows_Call) RunAndReturn(run func(context.Context) ([]models.Show, error)) *Application_GetShows_Call {
	_c.Call.Return(run)
	return _c
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
